{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppStreamCam","props","streamCamVideo","bind","navigator","mediaDevices","getUserMedia","video","then","mediaStream","document","querySelector","srcObject","onloadedmetadata","e","play","catch","err","console","log","name","message","id","autoPlay","controls","onClick","this","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0OA6CeA,E,kDArCb,WAAYC,GAAkB,IAAD,8BAC3B,cAAMA,IACDC,eAAgB,EAAKA,eAAeC,KAApB,gBAFM,E,kDAI7B,WAEEC,UAAUC,aACPC,aAFe,CAACC,OAAO,IAGvBC,MAAK,SAASC,GACb,IAAIF,EAAQG,SAASC,cAAc,SAEtB,MAATJ,IACFA,EAAMK,UAAYH,EAClBF,EAAMM,iBAAmB,SAASC,GACnB,MAATP,GACFA,EAAMQ,YAKbC,OAAM,SAASC,GACdC,QAAQC,IAAIF,EAAIG,KAAO,KAAOH,EAAII,c,oBAGxC,WACE,OACE,gCACE,qBAAKC,GAAG,YAAR,SACE,uBAAOC,UAAU,EAAMD,GAAG,eAAeE,UAAQ,MAEnD,uBACA,wBAAQC,QAASC,KAAKxB,eAAtB,oC,GAhCmByB,IAAMC,WCOlBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7B,SAAS8B,eAAe,SAM1BX,M","file":"static/js/main.5ab5762b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\ninterface AppProps{\n\n}\n\nclass AppStreamCam extends React.Component {\n  constructor(props: AppProps) {\n    super(props);\n    this.streamCamVideo= this.streamCamVideo.bind(this)\n  }\n  streamCamVideo() {\n    var constraints = {video: true};\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(function(mediaStream) {\n        var video = document.querySelector(\"video\");\n\n        if (video != null){\n          video.srcObject = mediaStream;\n          video.onloadedmetadata = function(e) {\n            if (video != null) {\n              video.play();\n            }\n          };\n        }\n      })\n      .catch(function(err) {\n        console.log(err.name + \": \" + err.message);\n      }); // always check for errors at the end.\n  }\n  render() {\n    return (\n      <div>\n        <div id=\"container\">\n          <video autoPlay={true} id=\"videoElement\" controls></video>\n        </div>\n        <br/>\n        <button onClick={this.streamCamVideo}>Start streaming</button>\n      </div>\n    );\n  }\n}\n\nexport default AppStreamCam;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}