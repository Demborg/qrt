{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Video","videoRef","React","createRef","canvasRef","callback","computeFrame","setTimeout","video","current","width","videoWidth","height","videoHeight","canvas","ctx","getContext","drawImage","frame","getImageData","length","data","i","red","green","blue","gray","putImageData","this","navigator","mediaDevices","getUserMedia","facingMode","then","mediaStream","srcObject","onloadedmetadata","e","play","catch","err","console","log","name","message","className","autoPlay","ref","playsInline","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAOMA,E,4MAEJC,SAAWC,IAAMC,Y,EACjBC,UAAYF,IAAMC,Y,EA6BlBE,SAAW,WACT,EAAKC,eACLC,YAAW,WACP,EAAKF,aACJ,I,EAGPC,aAAe,WACb,IAAIE,EAAQ,EAAKP,SAASQ,QACtBC,EAAQF,EAAMG,WACdC,EAASJ,EAAMK,YACnB,GAAc,IAAVH,EAAJ,CAGA,IAAII,EAAS,EAAKV,UAAUK,QAC5BK,EAAOJ,MAAQA,EACfI,EAAOF,OAASA,EAEhB,IAAIG,EAAG,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAQE,WAAW,MAC7BD,EAAIE,UAAUT,EAAO,EAAG,EAAGE,EAAOE,GAKlC,IAJA,IAAMM,EAAQH,EAAII,aAAa,EAAG,EAAGT,EAAOE,GACtCQ,EAASF,EAAMG,KAAKD,OACpBC,EAAOH,EAAMG,KAEVC,EAAI,EAAGA,EAAIF,EAAQE,GAAK,EAAG,CAClC,IAAMC,EAAMF,EAAKC,EAAI,GACfE,EAAQH,EAAKC,EAAI,GACjBG,EAAOJ,EAAKC,EAAI,GAClBI,GAAQH,EAAMC,EAAQC,GAAQ,EAC9BF,EAAa,IAAPE,GAAcF,EAAc,IAARC,GAC5BH,EAAKC,EAAI,GAAKI,EACdL,EAAKC,EAAI,GAAKI,EACdL,EAAKC,EAAI,GAAKI,IAEdL,EAAKC,EAAI,GAAK,EACdD,EAAKC,EAAI,GAAK,GAGlBP,EAAIY,aAAaT,EAAO,EAAG,K,uDAjE7B,WACE,IAOIV,EAAQoB,KAAK3B,SAASQ,QAC1BoB,UAAUC,aACPC,aATe,CAChBvB,MAAO,CACLE,MAAO,IACPE,OAAQ,IACRoB,WAAY,iBAMbC,MAAK,SAASC,GACT1B,IACFA,EAAM2B,UAAYD,EAClB1B,EAAM4B,iBAAmB,SAASC,GAC5B7B,GACFA,EAAM8B,YAKbC,OAAM,SAASC,GACdC,QAAQC,IAAIF,EAAIG,KAAO,KAAOH,EAAII,YAEpChB,KAAKvB,a,oBA4CT,WACE,OACE,sBAAKwC,UAAU,eAAf,UACE,uBAAOC,UAAU,EAAMC,IAAKnB,KAAK3B,SAAU+C,aAAa,EAAMH,UAAU,UACxE,wBAAQjC,OAAQ,IAAKF,MAAO,IAAKqC,IAAKnB,KAAKxB,UAAWyC,UAAU,iB,GA7EpD3C,IAAM+C,WA4FXC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OChFSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f14cf9ae.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\ninterface VideoProps { \n}\ninterface VideoState { \n}\n\nclass Video extends React.Component<VideoProps, VideoState> {\n\n  videoRef = React.createRef<HTMLVideoElement>()\n  canvasRef = React.createRef<HTMLCanvasElement>()\n\n  componentDidMount() {\n    let constraints = {\n      video: {\n        width: 640,\n        height: 640,\n        facingMode: \"environment\",\n      }\n    }\n    let video = this.videoRef.current \n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(function(mediaStream) {\n        if (video) {\n          video.srcObject = mediaStream;\n          video.onloadedmetadata = function(e) {\n            if (video) {\n              video.play()\n            }\n          }\n        }\n      })\n      .catch(function(err) {\n        console.log(err.name + \": \" + err.message);\n      }); // always check for errors at the end.\n      this.callback()\n  }\n  \n  callback = () => {\n    this.computeFrame();\n    setTimeout(() => {\n        this.callback();\n      }, 0);\n  }\n\n  computeFrame = () => {\n    let video = this.videoRef.current!\n    let width = video.videoWidth\n    let height = video.videoHeight\n    if (width === 0) {\n      return \n    }\n    let canvas = this.canvasRef.current!\n    canvas.width = width\n    canvas.height = height\n\n    let ctx = canvas?.getContext('2d')!\n    ctx.drawImage(video, 0, 0, width, height)\n    const frame = ctx.getImageData(0, 0, width, height)\n    const length = frame.data.length\n    const data = frame.data\n\n    for (let i = 0; i < length; i += 4) {\n      const red = data[i + 0];\n      const green = data[i + 1];\n      const blue = data[i + 2];\n      let gray = (red + green + blue) / 3\n      if (red < blue * 1.3 || red < green * 1.3) { \n        data[i + 0] = gray;\n        data[i + 1] = gray;\n        data[i + 2] = gray;\n      } else {\n        data[i + 1] = 0;\n        data[i + 2] = 0;\n      }\n    }\n    ctx.putImageData(frame, 0, 0);\n  };\n\n  render() {\n    return (\n      <div className=\"videoWrapper\">\n        <video autoPlay={true} ref={this.videoRef} playsInline={true} className=\"video\"></video>\n        <canvas height={300} width={300} ref={this.canvasRef} className=\"video\"></canvas>\n      </div>\n    );\n  }\n\n}\n\nfunction App() {\n  return (\n    <div>\n      <Video/>\n    </div>\n  )\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}